@page "/"
@inject BlazorControlCenter.Services.ServerStateService StateService
@implements IDisposable
@rendermode InteractiveServer
@using BlazorControlCenter.Services


<PageTitle>Arduino Dashboard</PageTitle>

<div class="container-fluid vh-100 d-flex flex-column">
    <header class="py-2">
        <h1>Arduino TCP Dashboard</h1>
    </header>

    <main class="row flex-grow-1" style="overflow-y: hidden;">
        <div class="col-4 d-flex flex-column">
            <h3>Connected Clients</h3>
            <div class="list-group flex-grow-1" style="overflow-y: auto;">
                @if (StateService.Clients.Any())
                {
                    @foreach (var client in StateService.Clients.Values.OrderBy(c => c.Id))
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <span class="fw-bold">@client.Name</span>
                            
                            <!-- CORRECTED: This now calls a helper method, which is the cleanest approach -->
                            <button class="btn btn-outline-primary" @onclick="@(() => SendToggleCommand(client))">Toggle Light</button>
                        </div>
                    }
                }
                else
                {
                    <div class="list-group-item">No clients connected.</div>
                }
            </div>
        </div>

        <div class="col-8 d-flex flex-column">
            <h3>Activity Log</h3>
            <div id="log-container" class="bg-dark text-white p-3 rounded flex-grow-1" style="overflow-y: scroll; font-family: Consolas, monospace; font-size: 0.9em;">
                @foreach (var msg in StateService.LogMessages)
                {
                    <div>@msg</div>
                }
            </div>
        </div>
    </main>
</div>

@code {
    // This method runs once when the component is created.
    protected override void OnInitialized()
    {
        StateService.OnChange += OnStateChanged;
    }

    // This method is called by the event when new data arrives.
    private void OnStateChanged()
    {
        // This ensures the UI refreshes safely from any thread.
        InvokeAsync(StateHasChanged);
    }

    // NEW HELPER: This method makes the HTML cleaner. It calls the main SendCommand method.
    private void SendToggleCommand(ArduinoClient client)
    {
        SendCommand(client, "LIGHT_TOG");
    }

    // This is the main method for sending any command.
    private void SendCommand(ArduinoClient client, string command)
    {
        if (string.IsNullOrWhiteSpace(command))
        {
            return;
        }

        try
        {
            var stream = client.TcpClient.GetStream();
            byte[] buffer = System.Text.Encoding.ASCII.GetBytes(command + "\n");
            stream.Write(buffer, 0, buffer.Length);
            stream.Flush();
            StateService.AddLogMessage($"Sent '{command}' to Client {client.Id}");
        }
        catch (Exception ex)
        {
            StateService.AddLogMessage($"Error sending to Client {client.Id}: {ex.Message}");
        }
    }

    // This method runs when the user navigates away from the page.
    public void Dispose()
    {
        StateService.OnChange -= OnStateChanged;
    }
}